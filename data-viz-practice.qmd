---
title: "EDS 221: Day 8 interactive"
author: "Liz Peterson"
format: html
editor_options: 
  chunk_output_type: console
---

```{r}
# general use packages:
library(tidyverse)
library(here)
library(janitor)

# specifically for plots:
library(patchwork)
library(ggrepel)
library(gghighlight)
library(paletteer)
library(ggExtra)
library(ggbeeswarm)
```

```{r}
# load in lizard data
lizards <- read_csv(here("data_tidy", "lizards.csv"))
```

```{r}
# all three of these plots are exactly the same 
# ggplot sets what is global for the whole plot. so what we assign there will be the same. the first plot says that the data will be lizards and the axes will. the second plot says the data will be lizards for everything, but we could make another graph with different axes. 
ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point() + 
  geom_line()

ggplot(data = lizards) +
  geom_point(aes(x = total_length, y = weight)) +
  
# here, I could conceptually add another layer with a different data set and axes, because nothing is set in ggplot
ggplot() +
  geom_point(data = lizards, aes(x = total_length, y = weight))
```

```{r}
ggplot(data = lizards, aes(x = total_length)) +
  geom_histogram()
```

```{r}
# the jitter can be better for seeing distribution of points than a regular scatter plot
ggplot(data = lizards, aes(y = common_name, x = weight)) +
  geom_jitter()
```

## working with colors
```{r}
# updating based on a constant --> To change aesthetics of a graph based on a constant (e.g. “Make all the points BLUE”), we can add the information directly to the relevant geom_ layer
ggplot(data = lizards, aes(x = weight)) +
  geom_histogram(color = "orange",
                 fill = "purple",
                 linewidth = 2,
                 linetype = "dotted")
```

```{r}
ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point(color = "#FFC2d1",
             fill = "#726DA8",
             shape = 22,
             size = 10,
             alpha = 0.7)
```

## working with scales
```{r}
# aesthetics changed by variable
ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point(aes(color = common_name,
                 size = total_length),
             alpha = 0.8) + # changed the transparency out of the aesthetics call because it's not based on a variable
  #scale_color_brewer(palette = "Set3")
  scale_color_discrete(type = c("#FEFADC", "#FEFADC", "#FEFADC", "#FEFADC", "#FEFADC", "#FEFADC","#1098F7"))
```

## working with themes
```{r}
# adding in themes!
ggplot(data = lizards, aes(x = site, y = weight)) +
  geom_jitter(aes(color = common_name)) +
  theme_minimal()

ggplot(data = lizards, aes(x = site, y = weight)) +
  geom_jitter(aes(color = common_name)) +
  theme_bw()

ggplot(data = lizards, aes(x = site, y = weight)) +
  geom_jitter(aes(color = common_name)) +
  theme_light()
```

## axis labels!!!
```{r}
# always update axis labels!!!
ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point() +
  labs(x = "Total Length (mm)",
       y = "Weight (g)",
       title = "Lizard size")
```

## faceting
```{r}
ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point() +
  facet_wrap(~common_name, ncol = 3, scales = "free") + # panel for each species based on common name
  # without scales = "free", all of the axes will be the same for each species. scales = "free" scales the axes. 
  labs(x = "Total Length (mm)",
       y = "Weight (g)")
```

```{r}
# faceting with multiple variables
ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point() +
  facet_grid(sex ~ tail)
```

```{r}
lizards_counts <- lizards %>%
  count(common_name)

ggplot(data = lizards_counts, aes(y = common_name, x = n)) +
  geom_col() # by default here, the columns are put in alphabetical order

ggplot(data = lizards_counts, aes(y = fct_reorder(common_name, n), x = n)) +
  geom_col()
# we are reordering the common names based on the number of individuals, and we can do this because common name is a factor
```

```{r}
ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point(aes(color = common_name, shape = common_name),
             size = 2) +
  theme_minimal() +
  labs(x = "Total Length (mm)",
       y = "Weight (g)",
       title = "Lizard species") +
  facet_wrap(~common_name, scales = "free")
```

```{r}
# facet grid using factor reordering
ggplot(data = lizards, aes(y = fct_infreq(common_name))) +
  geom_bar(aes(fill = site)) +
  theme_minimal() +
  labs(x = "Lizard counts",
       y = "Species (common name)") +
  facet_grid(sex ~ tail)
```

## scales
```{r}
ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point() +
  scale_x_continuous(breaks = c(0, 250, 500), # syntax is scale _ the variable you're updating _ and the type of data
                     limits = c(0, 500)) +
  scale_y_continuous(breaks = seq(0, 70, by = 10), # takes the axis from counting by 20's to counting by 10's
                     limits = c(0, 70))
```

```{r}
lizard_counts <- lizards %>% 
  mutate(date = lubridate::mdy(date)) %>% 
  count(date)

ggplot(data = lizard_counts, aes(x = date, y = n)) +
  geom_line() +
  scale_x_date(breaks = scales::breaks_pretty()) +
  #scale_x_date(breaks = scales::breaks_width("3 years"), # See date_breaks for next year!
  #             labels = scales::label_date("'%y")) + # See date_labels for next year!
  scale_y_log10(labels = scales::label_scientific())
```

```{r}
ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point(aes(col = weight)) +
  #scale_color_steps2(low = "green", mid = "white", high = "red", midpoint = 150, breaks = c(50, 75, 150, 180, 220, 280))
  scale_color_steps(low = "red", high = "black")
  #scale_color_gradientn(colors = c("orange", "red", "purple", "navy", "black"))
  #scale_color_gradient(low = "orange", high = "navy")
```

## themes
```{r}
p <- ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point()

# p +
#   theme(panel.grid = element_blank()) # remove all grid lines

p +
  theme(panel.grid.minor = element_blank(),
        panel.grid.major = element_line(color = "red"),
        plot.background = element_rect(fill="pink"), # background is only the outer edge
        text = element_text(size = 12, family = "serif"),
        axis.text.x = element_text(color = "blue"),
        axis.text.y = element_text(color = "green"),
        panel.background = element_rect(color = "purple", fill = "yellow")) # panel is the inner graph
```

```{r}
p +
  geom_hline(yintercept = mean(lizards$weight), color = "blue", linetype = "dashed") + # gives us a horizontal line at y = 40
  geom_vline(xintercept = 100, color = "red", linetype = "dashed") + # gives us a vertical line at x = 100
  annotate("text", x = 100, y = 50, label = "COOL!", color = "purple") +
  annotate("text", x = 350, y = mean(lizards$weight) + 1.5, label = "Mean weight") # we moved the label 1.5 units up so it's not sitting directly on the mean line
```

```{r}
mono <- read_csv(here("data_tidy", "mono.csv"))

ggplot(data = mono, aes(x = year, y = lake_level)) +
    geom_rect(aes(xmin = 1941,
                xmax = 1983,
                ymin = 6350,
                ymax = 6440),
            fill = "gray90", alpha = 0.3) + # putting a rectangle to represent unrestricted diversions
  geom_line() +
  labs(x = "Year",
       y = "Lake surface level\n(feet above sea level)\n", # \n puts that part on a separate line
       title = "Mono Lake (1850 - 2017)",
       caption = "Data: Mono Basin Clearinghouse") +
  scale_y_continuous(limits = c(6350, 6440),
                     breaks = c(6370, 6400, 6430),
                     labels = scales::label_comma()) +
  scale_x_continuous(limits = c(1850, 2020),
                     breaks = seq(from = 1850, to = 2010, by = 20),
                     expand = c(0,0)) +
  theme_minimal() +
  geom_hline(yintercept = 6360, linetype = "dashed") +
  annotate("text", x = 1910, y = 6370, label = "Decreased shrimp abundance expected\n(6,360 feet above sea level\n") +
  annotate("text", x = 1962, y = 6425, label = "unrestricted diversions\n(1941-1983)\n",
           size = 2.5)
```



